#!/usr/bin/env ruby

require 'open3'
require 'json'
require 'ostruct'

%w[INT TERM QUIT].each do |sig|
  Signal.trap sig, 'EXIT'
end

BORDER_WIDTH = Integer(ARGV[0])
FOCUS_COLOR = ARGV[1].gsub(/^#/, '0x')
DEFOCUS_COLOR = ARGV[2].gsub(/^#/, '0x')
SUBBORDERS = Integer(ARGV[3])

TARGET_DELTA = 60

DEBUG = false

def ex(command)
  puts command if DEBUG
  `#{command}`
end

at_exit { ex 'waitron wm_config enable_borders true' }

def overridden?(wid)
  system("wattr o #{wid}")
end

def tint(color, amount)
  ex "colort -l #{amount} #{color}"
end

def prepare_args(color)
  args = ''
  new_color = tint color, -TARGET_DELTA / 2
  delta = -TARGET_DELTA / 2
  SUBBORDERS.times do |i|
    delta += TARGET_DELTA / SUBBORDERS
    args += "-b #{$widths[i]} -c #{new_color} "
    new_color = tint color, delta
  end

  args
end

def border(status, wid)
  data = xprop_data `xprop -notype -id #{wid} WINDOWCHEF_STATUS`
  return if data.nil? || data.state == 'maxed'
  ex "chwb -s #{BORDER_WIDTH} #{wid}"
  ex "chwbn #{$chwb_args[status]} #{wid}"
end

def focus(wid)
  border :focused, wid
end

def defocus(wid)
  border :defocused, wid
end

def focused?(wid)
  wid == `pfw`.strip!
end

def xprop_data(raw)
  /WINDOWCHEF_STATUS = (?<data>.+)/ =~ raw
  return nil if data.nil?
  data = eval data

  JSON.parse(data, object_class: OpenStruct)
end

def snoop(wid)
  Thread.new do
    width = height = -1
    Open3.popen3("xprop -notype -spy -id #{wid} WINDOWCHEF_STATUS") do |_, stdout, _, _|
      stdout.each do |line|
        parsed = xprop_data line
        next if parsed.nil?
        if (parsed.geom.width != width || parsed.geom.height != height) &&
           parsed.mapped

          if focused? wid
            focus wid
          else
            defocus wid
          end
        end

        width = parsed.geom.width
        height = parsed.geom.height
      end
    end
  end
end

$widths = [BORDER_WIDTH / SUBBORDERS] * SUBBORDERS
$widths[-1] = BORDER_WIDTH / SUBBORDERS + BORDER_WIDTH % SUBBORDERS
$chwb_args = { focused: prepare_args(FOCUS_COLOR), defocused: prepare_args(DEFOCUS_COLOR) }

ex 'waitron wm_config enable_borders false'
ex('lsw').lines.each do |wid|
  wid.strip!
  puts "#{wid} already here"
  snoop wid unless overridden? wid
end
Open3.popen3('wew -m 2097152') do |_, stdout, _, _|
  stdout.each do |line|
    /(?<ev>\d+):(?<wid>\w+)/ =~ line
    next if overridden? wid
    ev = Integer(ev)
    case ev
    when 16
      puts "#{wid} created"
      snoop wid unless overridden? wid
    when 9, 19
      focus wid
    when 10
      defocus wid
    end
  end
end
