#!/bin/sh
#
# Simple status bar. Really.
# (c) tudurom 2016 - wtfpl
#

# Colors {{{
. $HOME/bin/wmrc
reload_settings() {
	# Color definitions
	source "$HOME/bin/sourcecolors"

	# actual colors for the foreground and background of the bar
	CB="$PANEL_BG_COLOR"
	if [ -z "$PANEL_TRANSPARENT" ] || \
		   ([ -n "$PANEL_TRANSPARENT" ] && [ -n "$PANEL_KEEP_HIGH" ]); then
		HIGH="$(colort -l ${sign}12 $CB)"
		HIGH2="$(colort -l ${sign}20 $CB)"
	else
		HIGH="#00000000"
		HIGH2="#00000000"
	fi

	if [ -n "$PANEL_TRANSPARENT" ]; then
		CB='#00000000'
	fi
	CF="$CFG"

	local sign=""
	test "$COLOR_STYLE" = "light" && sign="-"

	CA=""
	if [ "$COLOR_STYLE" = "dark" ]; then
		CA="$C8"
	else
		CA="$C15"
	fi

}

reload_settings
# }}}

# Setup {{{

# functions communicate through a fifo
[ -e "$PANEL_FIFO" ] && rm "$PANEL_FIFO"
mkfifo "$PANEL_FIFO"

PPD="$(ppd)"
PD_X="$(dattr x $PPD)"
PD_Y="$(dattr y $PPD)"
PD_WIDTH="$(dattr w $PPD)"
PD_HEIGHT="$(dattr h $PPD)"

# Full width bar
BAR_WIDTH=$(( $PD_WIDTH - 2 * PANEL_BORDER_WIDTH ))
BAR_HEIGHT="$PANEL_STATUS_HEIGHT"
BAR_X="0"
BAR_Y="0"

SEP_SMALL=" "

# Bar options
BAR_OPTS=""
# Make it wmutils compatible
BAR_OPTS="${BAR_OPTS} -d"
# Add borders
BAR_OPTS="${BAR_OPTS} -R $CB -r $PANEL_BORDER_WIDTH"
# Position it
BAR_OPTS="${BAR_OPTS} -g ${BAR_WIDTH}x${BAR_HEIGHT}+${BAR_X}+${BAR_Y}"
# Colors
BAR_OPTS="${BAR_OPTS} -B ${CB} -F ${CF}"
# Underline width
BAR_OPTS="${BAR_OPTS} -u 3"
# Fonts
BAR_OPTS="${BAR_OPTS} -f ${PANEL_FONT} -f ${PANEL_ICON_FONT} -n minbar"

# Seconds to sleep
SLEEP_TIME="1"

# Maximum length of song title
SKROLL_CHARS=60

# }}}

# Icons {{{
CLOCK_ICON=""
DATE_ICON=""
# }}}

# Functions {{{

# Print icon
i() {
	echo "%{F$PANEL_ACCENT_COLOR}${1} %{F$CF}"
}

segment() {
	local ico="$2"
	echo "%{F$PANEL_ACCENT_COLOR}%{B$HIGH2} $ico %{F-}%{B$HIGH} $1 %{B-}"
}

# raw print
rp() {
	printf "%b" "$1"
}

get_time() {
	while :; do
		local format="%H:%M"
		test "$(date +"%d %m")" = "01 04" && format='%s'
		local out="$(date +"$format" | sed 's/ //')"

		echo "TIME $out"
		sleep 0.5
	done
}
get_time > "$PANEL_FIFO" &

get_date() {
	while :; do
		local out="$(date '+%a, %d %B' | tr [:upper:] [:lower:])"

		echo "DATE $out"
		sleep 10
	done
}
get_date > "$PANEL_FIFO" &

get_battery() {
	while :; do
		for bat in /sys/class/power_supply/BAT*; do
			printf "BATTERY %s\n" "$(cat - "${bat}/capacity")"
			break
		done
		sleep 10
	done
}
[ ! -f /sys/class/power_supply/BAT0 ] || \
	get_battery > "$PANEL_FIFO" &

get_battery_icon() {
	while :; do
		local status=""
		local perc=""
		for bat in /sys/class/power_supply/BAT*; do
			status="$(cat "$bat/status")"
			perc="$(cat "$bat/capacity")"
			break
		done

		local ico=""
		if [ "$status" = "Charging" ]; then
			ico=""
		elif [ "$status" = "Full" ] || [ "$status" = "Unknown" ]; then
			ico=""
		elif [ "$perc" -gt 60 ]; then
			ico=""
		elif [ "$perc" -gt 30 ]; then
			ico=""
		else
			ico=""
		fi

		echo "BATTERY_ICON $ico"
		sleep 10
	done
}
[ ! -f /sys/class/power_supply/BAT0 ] || \
	get_battery_icon > "$PANEL_FIFO" &

get_music() {
	musicstat bar | while read -r line; do
		local icon="$(echo "$line" | cut -d',' -f1)"
		local text="$(echo "$line" | cut -d',' -f2-)"
		printf "MUSIC_ICON %s\n" "$icon"
		if [ "$(echo "$text" | wc -m)" -gt "$SKROLL_CHARS" ]; then
			local oldifs="$IFS"
			IFS=''
			echo "$text" | skroll -lrn "$SKROLL_CHARS" -d 0.1 |\
				while read -r skrtext; do
					local newtext="$(musicstat text)"
					test "$text" != "$newtext" && break
					printf "MUSIC %*s\n" "$SKROLL_CHARS" "$skrtext"
				done
			IFS="$oldifs"
		else
			echo "MUSIC $text"
		fi
	done
}
get_music > "$PANEL_FIFO" &

get_ws() {
	local wm="$(wmname)"
	while :; do
		local out=""
		local groups=""
		case "$wm" in
			windowchef)
				# list of active groups. one number per line
				groups="$(xprop -root WINDOWCHEF_ACTIVE_GROUPS |\
				  grep -Eo '[0-9]+,*' | tr -d ',')"
				;;
		esac
		local pfw="$(pfw 2> /dev/null)"
		local fw_group="0"

		if [ "$pfw" != "$(lsw -r)" ] && [ -n "$pfw" ]; then
			fw_group="$(xprop -notype -id "$pfw" _NET_WM_DESKTOP | cut -d' ' -f3)"
			fw_group="$(( fw_group + 1 ))"
		fi

		for g in $(seq "$GNUMBER"); do
			if [ "$g" = "$fw_group" ]; then
				out="${out}%{B$HIGH2}%{+u}%{U$C9}"
			else
				out="${out}%{B$HIGH}"

				# check if group is active
				if echo "$groups" | grep -q "$g"; then
					out="${out}%{+u}%{U$C1}"
				else
					out="${out}%{F$CA}"
				fi
			fi
			out="${out}%{A:waitron group_toggle $g:} ${g} %{A}%{-u}%{B-}%{U-}%{F-}"
		done
		echo "WS $out"
		sleep 1
	done
}

get_ws > "$PANEL_FIFO" &

# }}}

# Main loop {{{
# TODO : find a way to kill background processes on exit
while IFS='' read -r line; do
	case "$line" in
		TIME*)
			fn_time="${line#TIME }"
			;;
		DATE*)
			fn_date="${line#DATE }"
			;;
		BATTERY_ICON*)
			fn_battery_icon="${line#BATTERY_ICON }"
			;;
		BATTERY*)
			fn_battery="${line#BATTERY }"
			;;
		WS*)
			fn_ws="${line#WS }"
			;;
		MUSIC_ICON*)
			fn_music_icon="${line#MUSIC_ICON }"
			;;
		MUSIC*)
			line="$(echo "$line" | sed -E 's/MUSIC ?//')"
			fn_music="$line"
			;;
	esac

	rp "%{l}$(segment "$fn_time" $CLOCK_ICON)${SEP_SMALL}"
	rp "$(segment "$fn_date" $DATE_ICON)${SEP_SMALL}"
	rp "${fn_ws}${SEP_SMALL}"
	rp "%{r}%{A:playerctl play-pause:}$(segment "$fn_music" "$fn_music_icon")%{A}"
	[ ! -f /sys/class/power_supply/BAT0 ] || \
		rp "${SEP_SMALL}$(segment "$fn_battery" "$fn_battery_icon")"
	rp "\n"
done < "$PANEL_FIFO" | lemonbar $BAR_OPTS | sh > /dev/null
# }}}
